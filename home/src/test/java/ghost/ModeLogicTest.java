/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ghost;

import java.util.*;
import java.io.*;
import processing.core.*;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTimeout;
import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;


class ModeLogicTest{
    Resources r = new Resources("safeMap.json");
    Engine game = r.game;
    ModeManager panic;
    ModeManager soda;
    Chaser chaser = r.chaser;


    @BeforeEach
    public void resetMovable(TestInfo info){
        game.restart();
        panic = ModeManager.modeList.get(0);  
        soda = ModeManager.modeList.get(1);
    }

    @Test
    public void modeSetting(){
        //mode information load correctly
        assertEquals(ModeManager.modeList.size(), 2);
        ModeManager.panic(10);
        ModeManager.sodaTime(10);
        assertEquals(ModeManager.modeList.size(), 2);

        assertEquals(panic.type, ModeManager.ModeType.panic);
        assertEquals(panic.status, false);
        assertEquals(panic.timer, 0);
        assertEquals(panic.length, 120);
        assertEquals(soda.type, ModeManager.ModeType.sodaTime);
    }






    @Test
    public void triggerAndTick(){
        //mode does not trigger itself
        later(130);
        assertEquals(panic.status, false);
        assertEquals(soda.status, false);

        //trigger panic mode
        ModeManager.trigger(game, ModeManager.ModeType.panic);
        later(5);
        assertEquals(panic.status, true);
        assertEquals(soda.status, false);
        assertEquals(panic.timer, 5);
        assertEquals(soda.timer, 0);
        for(Ghost gs : game.gs){
            assertTrue(gs.panic);
        }

        //trigger soda mode
        ModeManager.trigger(game, ModeManager.ModeType.sodaTime);
        later(5);
        assertEquals(panic.status, false);
        assertEquals(soda.status, true);
        assertEquals(panic.timer, 0);
        assertEquals(soda.timer, 5);
        for(Ghost gs : game.gs){
            assertTrue(gs.invisible);
        }

        //mode ends after it's specified length
        game.restart();
        ModeManager.trigger(game, ModeManager.ModeType.panic);
        later(5);
        assertEquals(panic.status, true);
        later(120);
        assertEquals(panic.status, false);
        assertEquals(panic.timer, 0);
        for(Ghost gs : game.gs){
            assertEquals(gs.panic, false);
        }

        //if a ghost is dead, and panic begin, it does not change mode or image
        game.restart();
        for(Ghost gs : game.gs){
            gs.alive = false;
        }
        ModeManager.trigger(game, ModeManager.ModeType.panic);
        later(5);
        assertEquals(panic.status, true);
        for(Ghost gs : game.gs){
            assertEquals(gs.panic, false);
        }
        later(120);
        for(Ghost gs : game.gs){
            assertEquals(gs.panic, false);
        }

        //if a ghost is dead, and sodaTime begin, it does not change mode or image
        ModeManager.trigger(game, ModeManager.ModeType.sodaTime);
        later(5);
        assertEquals(soda.status, true);
        for(Ghost gs : game.gs){
            assertEquals(gs.invisible, false);
        }
        later(120);
        for(Ghost gs : game.gs){
            assertEquals(gs.invisible, false);
        }

        
    }
    

    @Test
    public void triggerAndSaver(){
        assertArrayEquals(soda.save.timeSave, new int[] {0,0});
        int modeIndexCopy = game.modeIndex;
        int countFrameCopy = game.countFrame;

        //trigger soda mode will save modeIndex and counFrame in saver
        //soda mode will begin, timer for soda mode starts
        ModeManager.trigger(game, ModeManager.ModeType.sodaTime);
        assertArrayEquals(soda.save.timeSave, new int[] {modeIndexCopy,countFrameCopy});
        laterIntegration(100);
        assertEquals(soda.status, true);
        assertEquals(soda.timer, 100);

        //trigger soda mode again when the first is ongoing, reset timer
        //saved time and mode data will be loaded 
        ModeManager.trigger(game, ModeManager.ModeType.sodaTime);
        assertEquals(soda.status, true);
        assertEquals(soda.timer, 0);
        assertArrayEquals(new int[] {game.modeIndex,game.countFrame}, new int[] {modeIndexCopy,countFrameCopy});

        //soda mode ends automatically after it's specified length, timer also reset and stop
        laterIntegration(130);
        assertEquals(soda.status, false);
        assertEquals(soda.timer, 0);
    }



    public void later(int frame){
        int timer = frame;
        while(timer != 0){
            ModeManager.tick(game);
            timer -= 1;
        }
    }

    public void laterIntegration(int frame){
        int timer = frame;
        while(timer != 0){
            // ModeManager.tick(game);
            game.tick();
            timer -= 1;
        }
    }



    
   
    
}
