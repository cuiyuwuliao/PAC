/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ghost;

import java.util.*;
import java.io.*;
import processing.core.*;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTimeout;
import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;


class mapTest{

    @Test 
    public void constructor(){
        //empty map
        List<Grid> testSource = new ArrayList<Grid>();
        PImage fake = null;
        testSource.add(new Grid(fake,1,1));
        testSource.add(new Grid(fake,1,1));
        testSource.add(new Grid(fake,1,1));
        testSource.add(new Grid(fake,1,1));
        testSource.add(new Grid(fake,1,1));
        testSource.add(new Grid(fake,1,1));
        testSource.add(new Grid(fake,1,1));
        GMap gmap = new GMap(testSource);
        assertEquals(gmap.fruitNum, 0);
        assertEquals(gmap.allGrids.size(), 7);
        assertEquals(gmap.corners.size(), 0);


        //adding non-empty grids
        testSource.add(new Soda(fake,1,1));
        testSource.add(new Soda(fake,1,1));
        testSource.add(new Fruit(fake,1,1));
        testSource.add(new Fruit(fake,1,1));
        testSource.add(new Fruit(fake,1,1));
        testSource.add(new SFruit(fake,1,1));
        testSource.add(new Wall(fake,1,1));
        testSource.add(new Wall(fake,1,1));
        GMap gmap2 = new GMap(testSource);
        assertEquals(gmap2.fruitNum, 4);
        assertEquals(gmap2.specials.size(), 2);
        assertEquals(gmap2.wallGrids.size(), 2);
        assertEquals(gmap2.allGrids.size(), 15);
    }


    @Test 
    public void simpleMap(){
        //test maploaded coreectly
        Resources r = new Resources("simplestMap.json");
        Engine game = r.game;
        assertEquals(game.map.allGrids.size(), 140);
        assertEquals(game.map.fruitNum, 7);
        assertEquals(game.map.specials.size(), 1);
        assertEquals(game.map.deadEnds.size(), 2);
        assertEquals(game.map.intersections.size(), 0);
        assertEquals(game.map.turns.size(), 0);
        assertEquals(game.map.corners.size(), 4);

        //another map
        //note: turns/intersections/deadends outside wall still count
        Resources rr = new Resources("simplerMap.json");
        game = rr.game;
        assertEquals(game.map.allGrids.size(), 196);
        assertEquals(game.map.fruitNum, 6);
        assertEquals(game.map.specials.size(), 1);
        assertEquals(game.map.deadEnds.size(), 5);
        assertEquals(game.map.intersections.size(), 22);
        assertEquals(game.map.turns.size(), 10);
        assertEquals(game.map.corners.size(), 4);

        
    }



   
    
}
