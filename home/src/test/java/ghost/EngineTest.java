/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ghost;

import java.util.*;
import java.io.*;
import processing.core.*;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTimeout;
import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;


class EngineTest{
    Resources r = new Resources("simpleMap.json");
    Engine game = r.game;
    Player p1 = game.p1;
    Chaser chaser = r.chaser;

    @BeforeEach
    public void setup(){
        game.restart();
    }


    @Test
    public void switches(){
        game.modeSwitch();
        assertEquals(game.chase, true);
        game.modeSwitch();
        assertEquals(game.chase, false);
        game.debugMode();
        assertEquals(game.debugMode, true);
        game.debugMode();
        assertEquals(game.debugMode, false);

    }

    @Test
    public void playerAnimation(){
        assertEquals(game.playerTimer, 0);
        later(9);
        assertEquals(game.playerTimer, 1);
    }
    
    @Test
    public void checkGame(){
        // player dies, lose screen
        p1.lives = 0;
        game.checkGame();
        assertEquals(p1.alive, false);
        assertEquals(game.screenStatus, 2);

        //Does not show win screen when showing lose screen
        game.map.fruitRemain = 0;
        game.checkGame();
        assertEquals(game.screenStatus, 2);

        //fruits all eaten, show win screen
        game.p1.lives = 1;
        game.screenStatus = 0;
        game.map.fruitRemain = 0;
        game.checkGame();
        assertEquals(game.screenStatus, 1);

        //screenTimer begin with win/lose screen, restart game after 600 frame
        game.restart();
        later(5);
        assertEquals(game.screenTimer, 0);
        game.screenStatus = 2;
        later(5);
        assertEquals(game.screenTimer, 5);
        game.screenStatus = 1;
        later(600);
        assertEquals(game.screenStatus, 0);
        assertEquals(game.screenTimer, 0);

    }

    @Test
    public void collision(){
        //cllision confirm when distance < 16 pixels
        //player lose a life, all movable reset 
        p1.set(chaser.x - 1, chaser.y - 5);
        game.tick();
        assertEquals(p1.lives, 2);
        for(Movable m : Movable.allMovables){
            double distance = game.distance(m.startingXY[0], m.startingXY[1], m.x, m.y);
            assertTrue(distance <= m.v); //ghosts moved after resetting, so assert distance
        }

        //collision with player kill the panicing ghost
        for(Ghost gs : game.gs){
            gs.panic = true;
            gs.set(p1.x, p1.y);
            game.tick();
            assertEquals(gs.alive, false);
            assertEquals(p1.lives, 2);
        }

        //collision with dead ghost does not cost life
        for(Ghost gs : game.gs){
            gs.panic = false;
            gs.alive = false;
            gs.set(p1.x, p1.y);
            game.tick();
            assertEquals(p1.lives, 2);
        }

        //collision with ghost in soda mode cost life
        int livesCopy = p1.lives;
        for(Ghost gs : game.gs){
            gs.invisible = true;
            gs.alive = true;
            gs.set(p1.x, p1.y);
            game.tick();
            livesCopy -= 1;
            assertEquals(p1.lives, livesCopy);
        }
    }


    @Test
    public void eat(){
        // ghosts does not eat fruits
        later(300);
        assertEquals(game.map.fruitRemain, 6);
        assertEquals(game.map.specials.size(), 1);

        // player eat fruit, fruitRemain -1
        game.restart();
        int fruitNumCopy = game.map.fruitRemain;
        for(Grid gd : game.map.fruitGrids){
            p1.set(gd.x, gd.y);
            game.tick();
            fruitNumCopy -= 1;
            assertEquals(game.map.fruitRemain, fruitNumCopy);
        }
        assertTrue(ModeManager.modeList.get(0).status);//panic mode


        //soda makes ghosts invisible
        for(Grid gd : game.map.specials){
            if(gd.type == Basic.GridType.specialItem){
                p1.set(gd.x, gd.y);
                game.tick();
                for(Ghost gs : game.gs){
                    assertTrue(gs.invisible);
                    assertTrue(ModeManager.modeList.get(1).status);//soda mode
                }
            }
        }
    }

    @Test
    public void playerMove(){
        //walking toword wall does not count as first move
        game.playerInput(Dir.up);
        game.tick();
        assertTrue(p1.firstMove);

        //valid first move 
        game.playerInput(Dir.right);
        later(3);
        assertEquals(p1.firstMove, false);
        assertEquals(p1.going, Dir.right);
        assertEquals(p1.moveLog.get(p1.moveLog.size() - 1), Dir.right);

        //player can turn around at any time
        game.playerInput(Dir.left);
        assertEquals(p1.going, Dir.left);

        //player can't walk into wall, move will be recorded as command
        game.playerInput(Dir.down);
        assertEquals(p1.going, Dir.left);
        assertEquals(p1.command, Dir.down);

        //command will be executed at intersection/turn
        later(5);
        assertEquals(p1.going, Dir.down);
        assertEquals(p1.command, null);


        //player stops when colliding with wall
        game.playerInput(Dir.up);
        later(5);
        assertEquals(p1.going, null);

        //invalid move at intersection will be canceled
        game.playerInput(Dir.up);
        game.tick();
        assertEquals(p1.going, null);

        //valid move at intersection
        game.playerInput(Dir.right);
        game.tick();
        assertEquals(p1.going, Dir.right);
        assertEquals(p1.command, null);
    }

    @Test
    public void validifyLocation(){
        //unit test for validifyloc()
        assertArrayEquals(new int[] {0, 0}, game.validifyLoc(new int[] {0, 0}));
        assertArrayEquals(new int[] {0, 0}, game.validifyLoc(new int[] {-1, -1}));
        assertArrayEquals(new int[] {0, 10}, game.validifyLoc(new int[] {-5, 10}));
        assertArrayEquals(new int[] {27, 35}, game.validifyLoc(new int[] {1000, 1000}));
    }



    public void killGhosts(){
        for(Ghost gs : game.gs){
            gs.alive = false;
        }
    }

    public void later(int frame){
        while(frame != 0){
            game.tick();
            frame -= 1;
        }
    }


   



   
    
}
