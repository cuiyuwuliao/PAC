/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ghost;

import java.util.*;
import java.io.*;
import processing.core.*;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTimeout;
import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;


class GhostTest{
    Resources r = new Resources("simpleMap.json");
    Engine game = r.game;
    Normal normal = r.normal;
    Ambusher ambusher = r.ambusher;
    Chaser chaser = r.chaser;
    Ignorant ignorant = r.ignorant;
    Whim whim = r.whim;


    @BeforeEach
    public void resetMovable(TestInfo info){
        for(Ghost gs : game.gs){
            gs.reset(game);
        }
    
    }

    @Test
    public void ghostSetting(){
        assertEquals(ambusher.targetXY[0], 0);
        assertEquals(ambusher.targetXY[1], 0);
        assertEquals(ambusher.panic, false);
        assertEquals(ambusher.invisible, false);
    }

    @Test
    public void gsAI(){
        // test gsAI return directions in optimized order
        chaser.x = 10;
        chaser.y = 10;
        Dir[] expected = {Dir.left, Dir.up, Dir.down, Dir.right};
        assertArrayEquals(chaser.gsAI(1,9), expected);
        Dir[] expected2 = {Dir.up, Dir.left, Dir.right, Dir.down};
        assertArrayEquals(chaser.gsAI(9,1), expected2);
        Dir[] expected3 = {Dir.left, Dir.up, Dir.down, Dir.right};
        assertArrayEquals(chaser.gsAI(10,10), expected3);
        Dir[] expected4 = {Dir.down, Dir.left, Dir.right, Dir.up};
        assertArrayEquals(chaser.gsAI(9,12), expected4);
        Dir[] expected5 = {Dir.down, Dir.right, Dir.left, Dir.up};
        assertArrayEquals(chaser.gsAI(11,12), expected5);
    }

    @Test
    public void ghostInit(){
        //in scatter mode, gs go to corner
        Ghost.gsInit(game);
        assertEquals(ambusher.going, Dir.right);
        assertEquals(chaser.going, Dir.left);

        //ghostInit does nothing to moving ghost
        game.modeSwitch();
        Ghost.gsInit(game);
        assertEquals(ambusher.going, Dir.right);
        assertEquals(chaser.going, Dir.left);

        //in chase mode, gs all go to player
        game.restart();
        game.modeSwitch();
        Ghost.gsInit(game);
        assertEquals(ambusher.going, Dir.left);
        assertEquals(chaser.going, Dir.left);
    }

    @Test
    public void beEaten(){
        //beEaten() only affect ghost in panic mode, set alive to false, remove sprite 
        assertEquals(chaser.beEaten(), false);
        chaser.panic = true;
        assertEquals(chaser.beEaten(), true);
        assertEquals(chaser.sprite, null);
        assertEquals(chaser.alive, false);
    }

    @Test
    public void revive(){
        //revive() set ghost alive with sprite again
        chaser.beEaten();
        chaser.revive();
        assertEquals(chaser.alive, true);
        assertEquals(chaser.sprite, chaser.img.get(0));
        assertEquals(chaser.panic, false);
    }

    @Test
    public void toNormal(){
        //toNormal() set ghost to normal mode
        chaser.panic = true;
        chaser.invisible = true;
        chaser.sprite = null;
        chaser.toNormal();
        assertEquals(chaser.sprite, chaser.img.get(0));
        assertEquals(chaser.panic, false);
        assertEquals(chaser.invisible, false);

        //toNormal() has no effect on dead ghost
        chaser.panic = true;
        chaser.invisible = true;
        chaser.sprite = null;
        chaser.alive = false;
        chaser.toNormal();
        assertEquals(chaser.sprite, null);
        assertEquals(chaser.panic, true);
        assertEquals(chaser.invisible, true);

    }

    @Test
    public void logic(){
        //ghost turn back at dead end
        ambusher.going = Dir.left;
        ambusher.logic(game, 3);
        assertEquals(ambusher.going, Dir.right);

        //ghost can't turn back at intersection even it's the optimal direction
        ambusher.going = Dir.left;
        ambusher.logic(game, 2);
        assertEquals(ambusher.going, Dir.down);

        //ghost switch direction to player in chase mode
        ambusher.going = Dir.down;
        game.chase = true;
        ambusher.logic(game, 1);
        assertEquals(ambusher.going, Dir.left);

        //ghost can go to any direction in panic mode, but does not stop
        game.chase = false;
        ambusher.panic = true;
        ambusher.logic(game, 1);
        assertNotNull(ambusher.going);

        //ghost can go to any direction in soda mode, but does not stop
        ambusher.panic = false;
        ambusher.invisible = true;
        ambusher.logic(game, 1);
        assertNotNull(ambusher.going);

        //passing in invalid roadType, logic() does nothing
        ambusher.going = Dir.left;
        ambusher.logic(game, 100);
        assertEquals(ambusher.going, Dir.left);
    }






   
    
}
