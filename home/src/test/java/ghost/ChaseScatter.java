/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ghost;

import java.util.*;
import java.io.*;
import processing.core.*;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTimeout;
import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;


class ChaseScatter{
    Resources r = new Resources("empty.json");
    Engine game = r.game;
    Player p1 = game.p1;
    Normal normal = r.normal;
    Ambusher ambusher = r.ambusher;
    Chaser chaser = r.chaser;
    Ignorant ignorant = r.ignorant;
    Whim whim = r.whim;


    @BeforeEach
    public void resetAll(TestInfo info){
        game.restart();
    }

    @Test
    public void Ambusher(){
        //chase, before getting the first input, player does not move and has no direction
        //ambusher's target is player's location
        ambusher.chase(game);
        assertArrayEquals(ambusher.targetXY, new int[] {p1.x, p1.y});
        //chase, player moving
        p1.moveLog.add(Dir.left);
        ambusher.chase(game);
        int [] expected = {p1.x - 64, p1.y};
        assertArrayEquals(ambusher.targetXY, expected);
        p1.moveLog.add(Dir.right);
        ambusher.chase(game);
        int [] expected2 = {p1.x + 64, p1.y};
        assertArrayEquals(ambusher.targetXY, expected2);
        p1.moveLog.add(Dir.up);
        ambusher.chase(game);
        int [] expected3 = {p1.x, p1.y - 64};
        assertArrayEquals(ambusher.targetXY, expected3);p1.moveLog.add(Dir.right);
        p1.moveLog.add(Dir.down);
        ambusher.chase(game);
        int [] expected4 = {p1.x, p1.y + 64};
        assertArrayEquals(ambusher.targetXY, expected4);
        //chase, target outside the map
        p1.x = 32;
        p1.moveLog.add(Dir.left);
        ambusher.chase(game);
        int [] expected5 = {0, p1.y};
        assertArrayEquals(ambusher.targetXY, expected5);

        //scatter
        ambusher.scatter(game);
        assertArrayEquals(ambusher.targetXY, new int[] {432, 0});

    }

    @Test
    public void chaser(){
        //chase
        chaser.chase(game);
        assertArrayEquals(chaser.targetXY, new int[] {p1.x, p1.y});
        //scatter
        chaser.scatter(game);
        assertArrayEquals(chaser.targetXY, new int[] {0, 0});
    }

  

    @Test
    public void ignorant(){
        //chase, player within range
        ignorant.set(10,10);
        p1.set(30,30);
        ignorant.chase(game);
        assertArrayEquals(ignorant.targetXY, new int[] {p1.x, p1.y});
        //chase, player not within range
        ignorant.set(10,10);
        p1.set(300,300);
        ignorant.chase(game);
        assertArrayEquals(ignorant.targetXY, new int[] {0, 560});
        //scatter
        ignorant.scatter(game);
        assertArrayEquals(ignorant.targetXY, new int[] {0, 560});
    }

    @Test
    public void whim(){
        for(Movable m : Movable.allMovables){
            if(m.type == Basic.MoveType.chaser){
                m.set(160,160);
            }
        }
        //chase, chaser is present, player is going right
        p1.set(208,240);
        p1.moveLog.add(Dir.right);
        whim.chase(game);
        assertArrayEquals(whim.targetXY, new int[] {320, 320});
        //chase, chaser is present, player is going left
        p1.set(276,240);
        p1.moveLog.add(Dir.left);
        whim.chase(game);
        assertArrayEquals(whim.targetXY, new int[] {320, 320});
        //chase, chaser is present, player is going up
        p1.set(240,276);
        p1.moveLog.add(Dir.up);
        whim.chase(game);
        assertArrayEquals(whim.targetXY, new int[] {320, 320});
        //chase, chaser is present, player is going down
        p1.set(240,208);
        p1.moveLog.add(Dir.down);
        whim.chase(game);
        assertArrayEquals(whim.targetXY, new int[] {320, 320});
        //chase, target outside the map
        p1.set(64,64);
        p1.moveLog.add(Dir.up);
        whim.chase(game);
        assertArrayEquals(whim.targetXY, new int[] {0, 0});

        // chase, chaser is absent
        killChasers();
        whim.chase(game);
        assertArrayEquals(whim.targetXY, new int[] {432, 560});

        //scatter
        whim.scatter(game);
        assertArrayEquals(whim.targetXY, new int[] {432, 560});
    }


    public void killChasers(){
        for(Movable m : Movable.allMovables){
            if(m.type == Basic.MoveType.chaser){
                m.alive = false;
            }
        }
    }




   
    
}
