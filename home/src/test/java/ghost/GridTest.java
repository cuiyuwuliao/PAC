/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ghost;

import java.util.*;
import java.io.*;
import processing.core.*;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTimeout;
import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;

class GridTest {
    Resources r = new Resources("simpleMap.json");
    Engine game = r.game;
    Grid grid;
	Grid wall;
	Grid fruit;
	Grid soda;
	Grid sFruit;

    @BeforeEach
    public void setup(){
    	for(Grid gd : game.map.allGrids){
    		if(grid == null && Basic.GridType.grid == gd.type)
    			grid = gd;
    		else if(wall == null && Basic.GridType.wall == gd.type)
    			wall = gd;
    		else if(fruit == null && Basic.GridType.fruit == gd.type)
    			fruit = gd;
    		else if(soda == null && Basic.GridType.specialItem == gd.type)
    			soda = gd;
    		else if(sFruit == null && Basic.GridType.sFruit == gd.type)
    			sFruit = gd;
    	}
    }

    @Test 
    public void simpleGrid(){

        
    }

    @Test 
    public void basicMethods(){
    	// findXY()
    	int[] actual = Basic.findXY(1,2);
    	int[] expect = {32,16};
    	assertArrayEquals(actual, expect);
    	//set() & locID()
    	wall.set(99,99);
    	assertEquals(wall.x, 99);
    	assertEquals(wall.y, 99);
    	assertArrayEquals(wall.locID(), new int[] {6, 6});
    	wall.set(-31415926,-12345678);
    	assertEquals(wall.x, -31415926);
    	assertEquals(wall.y, -12345678);
    }

    @Test 
    public void gridMethods(){
        //empty() method set sprite to null 
    	fruit.empty();
    	assertEquals(fruit.sprite, null);

        //reset() method reset sprite
    	fruit.reset();
    	assertEquals(fruit.sprite, fruit.img.get(0));
    }

     @Test 
    public void step(){
        //setp on fruit cause fruitRemain -1, only the first step count
    	int fruitRemainCopy = game.map.fruitRemain;
    	fruit.step(game);
    	assertEquals(game.map.fruitRemain, fruitRemainCopy - 1);
    	fruit.step(game);
    	assertEquals(game.map.fruitRemain, fruitRemainCopy - 1);
    	sFruit.step(game);
    	assertEquals(game.map.fruitRemain, fruitRemainCopy - 2);
    	sFruit.step(game);
    	assertEquals(game.map.fruitRemain, fruitRemainCopy - 2);
        //sFruit trigger panic mode
    	assertEquals(ModeManager.modeList.get(0).status, true);

        //step on soda does not reduce fruitRemain, trigger soda mode
    	soda.step(game);
    	assertEquals(game.map.fruitRemain, fruitRemainCopy - 2);
    	assertEquals(ModeManager.modeList.get(0).status, false);
    	assertEquals(ModeManager.modeList.get(1).status, true);
    	soda.step(game);
    	assertEquals(game.map.fruitRemain, fruitRemainCopy - 2);
    	assertEquals(ModeManager.modeList.get(0).status, false);
    	assertEquals(ModeManager.modeList.get(1).status, true);

        //step on other grids, nothing hanppens
        game.restart();
        for(Grid gd : game.map.allGrids){
            if(gd.type == Basic.GridType.grid || gd.type == Basic.GridType.wall){
                gd.step(game);
                assertEquals(game.map.fruitRemain, fruitRemainCopy);
                assertEquals(ModeManager.modeList.get(0).status, false);
                assertEquals(ModeManager.modeList.get(1).status, false);
                assertEquals(game.p1.lives, 3);
            }
        }


    }


   
    
}
